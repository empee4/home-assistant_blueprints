blueprint:
  name: flashing lights color
  description: >
     Flashing lights via on off and delay and finally restore the previous light states.
  domain: automation
  source_url: https://github.com/empee4/home-assistant_blueprints/blob/main/flashing_lights.yaml
  input:
    activated:
        name: Activated
        description: "Toggle to activate or deactivate flashing lights."
        selector:
            entity:
                domain: input_boolean
    target_lights:
        name: Lights
        description: "To flashing lights"
        selector:
          target:
            entity:
              domain: light
    delay:
      name: (OPTIONAL) Delay
      description: "Delay flashing lights"
      default: 1000
      selector:
        number:
          min: 0
          max: 20000
          unit_of_measurement: milliseconds
    light_color_red:
      name: Flashing color (Red)
      description: "Color used for flashing sequence"
      default: 255
      selector:
        number:
          min: 1.0
          max: 255.0
          mode: slider
          step: 1.0
    light_color_green:
      name: Flashing color (Green)
      description: "Color used for flashing sequence"
      default: 255
      selector:
        number:
          min: 1.0
          max: 255.0
          mode: slider
          step: 1.0
    light_color_blue:
      name: Flashing color (Blue)
      description: "Color used for flashing sequence"
      default: 255
      selector:
        number:
          min: 1.0
          max: 255.0
          mode: slider
          step: 1.0
    light_brightness:
      name: Brightness
      description: Choose the brightness.
      default: 255
      selector:
        number:
          min: 1.0
          max: 255.0
          mode: slider
          step: 1.0
    light_transition:
      name: Transition time [s]
      description: Choose transition time.
      default: 1.0
      selector:
      default: 0
      selector:
        number:
          min: 0
          max: 2000
          unit_of_measurement: milliseconds
mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input activated
    to: 'on'

variables:
  activated: !input activated
  delay: !input delay
  target_lights: !input target_lights
  light_color_red: !input light_color_red
  light_color_green: !input light_color_green
  light_color_blue: !input light_color_blue
  light_brightness: !light_brightness
  light_transition: !light_transition

condition: []

action:
  - service: scene.create
    data:
        scene_id: all_lights_snapshot1
        snapshot_entities: >
               {% set lights = states.light
                 | map(attribute='entity_id') | join(',') %}
                 {{lights}}
  - service: light.turn_on
    target: !input target_lights
  - service: scene.create
    data:
        scene_id: all_lights_snapshot2
        snapshot_entities: >
               {% set lights = states.light
                 | map(attribute='entity_id') | join(',') %}
                 {{lights}}
  - service: light.turn_on
    target: !input target_lights
    data:
        rgb_color: ['{{ light_color_red }}',
                    '{{ light_color_green }}',
                    '{{ light_color_blue }}']
        brightness: !input light_brightness
        transition: !light_transition
  - repeat:
      while:
      - condition: template
        value_template: "{{ activated == none or is_state(activated, 'on') }}"
      sequence:
      - delay:
          milliseconds: "{{ delay }}"
      - service: light.toggle
        target: !input target_lights
        data:
            rgb_color: ['{{ light_color_red }}',
                        '{{ light_color_green }}',
                        '{{ light_color_blue }}']
            brightness: !input light_brightness
            transition: !light_transition
  - service: scene.turn_on
    data:
      entity_id: scene.all_lights_snapshot2
  - service: scene.turn_on
    data:
      entity_id: scene.all_lights_snapshot1
